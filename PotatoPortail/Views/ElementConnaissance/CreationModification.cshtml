@model PotatoPortail.ViewModels.PlanCadre.ElementConnaissanceViewModel
@{
    ViewBag.Titre = "Ajout d'éléments de connaissance";
    ViewBag.ListIdElementSousElement = new List<int>();
    foreach (var elementSousElement in Model.ConnaissanceSousElements)
    {
        ViewBag.ListIdElementSousElement.Add(elementSousElement.SousElementConnaissances.Count);
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/ajoutElement.js" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div id="formActivite" class="container">
        <div class="form-box ">

            <header class="light-header">
                <h1>@ViewBag.Titre</h1>
                @Html.HiddenFor(model => model.IdPlanCadre)
                @Html.HiddenFor(model => model.IdPlanCadreElement)
            </header>

            @if (Model.ConnaissanceSousElements.Any())
            {
                for (var indexElement = 0; indexElement < Model.ConnaissanceSousElements.Count; indexElement++)
                {
                    <div class="form-group" id="ap@(indexElement)">
                        @Html.TextBoxFor(m => m.ConnaissanceSousElements[indexElement].ElementConnaissance.Description, htmlAttributes: new { @class = "form-control inline" })
                        @Html.HiddenFor(m => m.ConnaissanceSousElements[indexElement].ElementConnaissance.IdElementConnaissance)
                        @Html.ValidationMessageFor(m => m.ConnaissanceSousElements[indexElement].ElementConnaissance.Description, "", new { @class = "text-danger" })

                        <a class="fancy-button rouge vertical-align margin-left" id="btnMoins@(indexElement)" onclick="enleverElement(this.id, @indexElement)">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                        <ul id="listSP0">

                            @for (var indexSousElement = 0; indexSousElement < Model.ConnaissanceSousElements[indexElement].SousElementConnaissances.Count; indexSousElement++)
                            {
                                <li class="form-group" id="ap@(indexElement)li@(indexSousElement)">
                                    @Html.TextBoxFor(m => Model.ConnaissanceSousElements[indexElement].SousElementConnaissances[indexSousElement].DescSousElement, htmlAttributes: new { @class = "form-control medium inline" })
                                    @Html.HiddenFor(m => m.ConnaissanceSousElements[indexElement].SousElementConnaissances[indexSousElement].IdSousElement)
                                    @Html.ValidationMessageFor(m => m.ConnaissanceSousElements[indexElement].SousElementConnaissances[indexSousElement].DescSousElement, "", new { @class = "text-danger" })
                                    <a class="fancy-button rouge vertical-align margin-left" id="btnMoins@(indexElement)_@(indexSousElement)" onclick="enleverSousElement(@indexElement, @indexSousElement)">
                                        <span class="glyphicon glyphicon-trash"></span>
                                    </a>
                                </li>
                            }
                            <a class="fancy-button" id="btnPlus@(indexElement)" onclick="ajoutSousElement(this.id, @indexElement)">
                                <span class="glyphicon glyphicon-plus"></span>
                                Ajouter un sous-élément
                            </a>
                        </ul>
                    </div>
                }
            }

            <div class="form-group">
                <input id="ajoutAP" type="button" onclick="ajoutElementConnaissance(this.id, 1)" value="Ajouter un élément de connaissace" class="fancy-button" />
            </div>
            <input type="submit" value="Enregistrer" class="fancy-button" />
            <a class="fancy-button rouge" href='@Url.Action("Structure", "PlanCadre", new { Model.IdPlanCadre })'>Annuler</a>
        </div>
    </div>
    <script>
        var idElement = @Model.ConnaissanceSousElements.Count;
        var listIdElementSousElement = new Array();
        var array = @Html.Raw(Json.Encode(@ViewBag.ListIdElementSousElement));
        for (var i = 0; i < array.length; i++) {
            listIdElementSousElement.push(array[i]);
        }

    </script>
}